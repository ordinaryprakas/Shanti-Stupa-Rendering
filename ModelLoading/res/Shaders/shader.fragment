#version 450 core
out vec4 FragColor;
//in vec3 ourColor;
in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;
struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};
uniform Material material;

struct Light {
 vec3 position;

 vec3 ambient;
 vec3 diffuse;
 vec3 specular;
};
uniform Light light;

uniform sampler2D texture_diffuse1;
uniform sampler2D ourTexture2;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 viewPos;

vec3 Ambient();
vec3 Diffuse();
vec3 Specular();

void main()
{
 vec3 ambient = Ambient();
 vec3 diffuse = Diffuse();
 vec3 specular = Specular();
 vec3 result = (ambient + diffuse) * objectColor;
 FragColor = vec4(result.x, result.y, result.z, 1.0) * texture(texture_diffuse1, TexCoords) ;
}

 vec3 Ambient(){
   vec3 ambient = vec3(0.8) * material.ambient * light.ambient;
   return ambient;
 }

 vec3 Diffuse(){
  vec3 norm = normalize(Normal);
  vec3 lightDir = normalize(lightPos - FragPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = vec3(1.0) * (diff * material.diffuse) * light.diffuse;
  return diffuse;
 }

 vec3 Specular(){
  vec3 norm = normalize(Normal);
  vec3 lightDir = normalize(lightPos - FragPos);
  float specularStrength = 0.5;
  vec3 viewDir = (viewPos - FragPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), 2);
  vec3 specular = vec3(1.0) *(material.specular * spec) * light.specular;
  return specular;
 }